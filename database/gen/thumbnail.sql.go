// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: thumbnail.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createThumbnail = `-- name: CreateThumbnail :one
INSERT INTO public.thumbnail (id, media_id) VALUES ($1, $2) RETURNING id, media_id, created_at
`

type CreateThumbnailParams struct {
	ID      pgtype.UUID
	MediaID pgtype.UUID
}

func (q *Queries) CreateThumbnail(ctx context.Context, arg CreateThumbnailParams) (Thumbnail, error) {
	row := q.db.QueryRow(ctx, createThumbnail, arg.ID, arg.MediaID)
	var i Thumbnail
	err := row.Scan(&i.ID, &i.MediaID, &i.CreatedAt)
	return i, err
}

const deleteThumbnail = `-- name: DeleteThumbnail :one
DELETE FROM public.thumbnail WHERE id = $1 RETURNING id, media_id, created_at
`

func (q *Queries) DeleteThumbnail(ctx context.Context, id pgtype.UUID) (Thumbnail, error) {
	row := q.db.QueryRow(ctx, deleteThumbnail, id)
	var i Thumbnail
	err := row.Scan(&i.ID, &i.MediaID, &i.CreatedAt)
	return i, err
}

const getThumbnail = `-- name: GetThumbnail :many
SELECT id, media_id, created_at FROM public.thumbnail
`

func (q *Queries) GetThumbnail(ctx context.Context) ([]Thumbnail, error) {
	rows, err := q.db.Query(ctx, getThumbnail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Thumbnail
	for rows.Next() {
		var i Thumbnail
		if err := rows.Scan(&i.ID, &i.MediaID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getThumbnailById = `-- name: GetThumbnailById :one
SELECT id, media_id, created_at FROM public.thumbnail WHERE id = $1
`

func (q *Queries) GetThumbnailById(ctx context.Context, id pgtype.UUID) (Thumbnail, error) {
	row := q.db.QueryRow(ctx, getThumbnailById, id)
	var i Thumbnail
	err := row.Scan(&i.ID, &i.MediaID, &i.CreatedAt)
	return i, err
}

const getThumbnailByMediaId = `-- name: GetThumbnailByMediaId :one
SELECT id, media_id, created_at FROM public.thumbnail WHERE media_id = $1
`

func (q *Queries) GetThumbnailByMediaId(ctx context.Context, mediaID pgtype.UUID) (Thumbnail, error) {
	row := q.db.QueryRow(ctx, getThumbnailByMediaId, mediaID)
	var i Thumbnail
	err := row.Scan(&i.ID, &i.MediaID, &i.CreatedAt)
	return i, err
}
