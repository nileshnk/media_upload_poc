// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: media.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMediaOne = `-- name: CreateMediaOne :one
INSERT INTO public.media (user_id, mime_type, file_name, thumbnail_id, url, quality, size, created_at, updated_at) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING id, user_id, mime_type, thumbnail_id, url, quality, file_name, size, created_at, updated_at
`

type CreateMediaOneParams struct {
	UserID      pgtype.UUID
	MimeType    pgtype.Text
	FileName    pgtype.Text
	ThumbnailID pgtype.UUID
	Url         pgtype.Text
	Quality     pgtype.Text
	Size        pgtype.Text
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

func (q *Queries) CreateMediaOne(ctx context.Context, arg CreateMediaOneParams) (Medium, error) {
	row := q.db.QueryRow(ctx, createMediaOne,
		arg.UserID,
		arg.MimeType,
		arg.FileName,
		arg.ThumbnailID,
		arg.Url,
		arg.Quality,
		arg.Size,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Medium
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MimeType,
		&i.ThumbnailID,
		&i.Url,
		&i.Quality,
		&i.FileName,
		&i.Size,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMedia = `-- name: DeleteMedia :one
DELETE FROM public.media WHERE id = $1 RETURNING id, user_id, mime_type, thumbnail_id, url, quality, file_name, size, created_at, updated_at
`

func (q *Queries) DeleteMedia(ctx context.Context, id pgtype.UUID) (Medium, error) {
	row := q.db.QueryRow(ctx, deleteMedia, id)
	var i Medium
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MimeType,
		&i.ThumbnailID,
		&i.Url,
		&i.Quality,
		&i.FileName,
		&i.Size,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllMedia = `-- name: GetAllMedia :many
SELECT id, user_id, mime_type, thumbnail_id, url, quality, file_name, size, created_at, updated_at FROM public.media
`

func (q *Queries) GetAllMedia(ctx context.Context) ([]Medium, error) {
	rows, err := q.db.Query(ctx, getAllMedia)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Medium
	for rows.Next() {
		var i Medium
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.MimeType,
			&i.ThumbnailID,
			&i.Url,
			&i.Quality,
			&i.FileName,
			&i.Size,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMediaById = `-- name: GetMediaById :one
SELECT id, user_id, mime_type, thumbnail_id, url, quality, file_name, size, created_at, updated_at FROM public.media WHERE id = $1
`

func (q *Queries) GetMediaById(ctx context.Context, id pgtype.UUID) (Medium, error) {
	row := q.db.QueryRow(ctx, getMediaById, id)
	var i Medium
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MimeType,
		&i.ThumbnailID,
		&i.Url,
		&i.Quality,
		&i.FileName,
		&i.Size,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMediaByUserId = `-- name: GetMediaByUserId :many
SELECT id, user_id, mime_type, thumbnail_id, url, quality, file_name, size, created_at, updated_at FROM public.media WHERE user_id = $1
`

func (q *Queries) GetMediaByUserId(ctx context.Context, userID pgtype.UUID) ([]Medium, error) {
	rows, err := q.db.Query(ctx, getMediaByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Medium
	for rows.Next() {
		var i Medium
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.MimeType,
			&i.ThumbnailID,
			&i.Url,
			&i.Quality,
			&i.FileName,
			&i.Size,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMediaCountByUserId = `-- name: GetMediaCountByUserId :one
SELECT COUNT(*) FROM public.media WHERE user_id = $1
`

func (q *Queries) GetMediaCountByUserId(ctx context.Context, userID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getMediaCountByUserId, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateMedia = `-- name: UpdateMedia :one
UPDATE public.media SET file_name = $2, mime_type = $3, thumbnail_id = $4, url = $5 WHERE id = $1 RETURNING id, user_id, mime_type, thumbnail_id, url, quality, file_name, size, created_at, updated_at
`

type UpdateMediaParams struct {
	ID          pgtype.UUID
	FileName    pgtype.Text
	MimeType    pgtype.Text
	ThumbnailID pgtype.UUID
	Url         pgtype.Text
}

func (q *Queries) UpdateMedia(ctx context.Context, arg UpdateMediaParams) (Medium, error) {
	row := q.db.QueryRow(ctx, updateMedia,
		arg.ID,
		arg.FileName,
		arg.MimeType,
		arg.ThumbnailID,
		arg.Url,
	)
	var i Medium
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MimeType,
		&i.ThumbnailID,
		&i.Url,
		&i.Quality,
		&i.FileName,
		&i.Size,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
